{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils.ts"],
  "sourcesContent": ["import {\n  Clipboard,\n  showHUD,\n  getSelectedFinderItems,\n  showInFinder,\n  closeMainWindow,\n  showToast,\n  Toast,\n} from \"@raycast/api\";\nimport { runBackgroundRemoval, storeClipboardImageAsTemporaryFile } from \"./utils\";\nimport path from \"path\";\n\nexport default async function main() {\n  try {\n    let paths: string[] = [];\n    let newFilePath: string | undefined;\n\n    const { file } = await Clipboard.read();\n\n    if (file) {\n      newFilePath = await storeClipboardImageAsTemporaryFile(file);\n\n      paths = [newFilePath];\n    } else {\n      const finderItems = await getSelectedFinderItems();\n\n      if (finderItems.length > 0) {\n        paths = finderItems.map((item) => item.path);\n      }\n    }\n\n    if (paths.length === 0) {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"No image selected\",\n        message: \"Please select an image in Finder or copy one to clipboard\",\n      });\n\n      return;\n    }\n\n    await runBackgroundRemoval({ paths });\n\n    const resultPaths = paths.map((itemPath) => {\n      const extension = path.extname(itemPath);\n      const basename = path.basename(itemPath, extension);\n\n      return path.resolve(path.dirname(itemPath), `${basename}-background-removed${extension}`);\n    });\n\n    if (newFilePath) {\n      await Clipboard.copy({\n        file: resultPaths[0],\n      });\n    }\n\n    await showToast({\n      style: Toast.Style.Animated,\n      title: \"Removing background\",\n    });\n\n    await showHUD(\"Removed background from image\");\n\n    if (!newFilePath) {\n      await showInFinder(resultPaths[0]);\n    }\n\n    await closeMainWindow();\n  } catch (error) {\n    console.error(error);\n\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Error removing background\",\n      message: String(error as Error).trim(),\n    });\n  }\n}\n", "import { environment } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { chmod, readFile, writeFile } from \"fs/promises\";\nimport { join } from \"path\";\nimport { tmpdir } from \"os\";\n\nlet _tempFilePath: string;\n\nexport function getTempFilePath(): string {\n  if (_tempFilePath) {\n    return _tempFilePath;\n  }\n\n  const tempDir = tmpdir();\n  const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n  _tempFilePath = join(tempDir, `remove-bg-${uniqueSuffix}.png`);\n\n  return _tempFilePath;\n}\n\nexport async function storeClipboardImageAsTemporaryFile(imageUrl: string) {\n  try {\n    const sourcePath = decodeURI(imageUrl.replace(\"file://\", \"\"));\n    const imageData = await readFile(sourcePath);\n\n    const tempFilePath = getTempFilePath();\n\n    await writeFile(tempFilePath, imageData);\n\n    return tempFilePath;\n  } catch (error) {\n    console.error(\"Error copying image file:\", error);\n\n    throw error;\n  }\n}\n\nexport async function runBackgroundRemoval({ paths }: { paths: string[] }) {\n  const command = join(environment.assetsPath, \"remove-background\");\n  await chmod(command, \"755\");\n  const output = await new Promise<string>((resolve, reject) => {\n    exec(`${command} ${paths.map((x) => JSON.stringify(x)).join(\" \")}`, (err, stdout, stderr) => {\n      if (err) {\n        // get stdout\n        reject(stdout + \" \" + stderr);\n      }\n      resolve(stdout);\n    });\n  });\n\n  return output;\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAQO,wBCRP,IAAAC,EAA4B,wBAC5BC,EAAqB,yBACrBC,EAA2C,uBAC3CC,EAAqB,gBACrBC,EAAuB,cAEnBC,EAEG,SAASC,GAA0B,CACxC,GAAID,EACF,OAAOA,EAGT,IAAME,KAAU,UAAO,EACjBC,EAAe,KAAK,IAAI,EAAI,IAAM,KAAK,MAAM,KAAK,OAAO,EAAI,GAAG,EACtE,OAAAH,KAAgB,QAAKE,EAAS,aAAaC,CAAY,MAAM,EAEtDH,CACT,CAEA,eAAsBI,EAAmCC,EAAkB,CACzE,GAAI,CACF,IAAMC,EAAa,UAAUD,EAAS,QAAQ,UAAW,EAAE,CAAC,EACtDE,EAAY,QAAM,YAASD,CAAU,EAErCE,EAAeP,EAAgB,EAErC,eAAM,aAAUO,EAAcD,CAAS,EAEhCC,CACT,OAASC,EAAO,CACd,cAAQ,MAAM,4BAA6BA,CAAK,EAE1CA,CACR,CACF,CAEA,eAAsBC,EAAqB,CAAE,MAAAC,CAAM,EAAwB,CACzE,IAAMC,KAAU,QAAK,cAAY,WAAY,mBAAmB,EAChE,eAAM,SAAMA,EAAS,KAAK,EACX,MAAM,IAAI,QAAgB,CAACC,EAASC,IAAW,IAC5D,QAAK,GAAGF,CAAO,IAAID,EAAM,IAAKI,GAAM,KAAK,UAAUA,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,GAAI,CAACC,EAAKC,EAAQC,IAAW,CACvFF,GAEFF,EAAOG,EAAS,IAAMC,CAAM,EAE9BL,EAAQI,CAAM,CAChB,CAAC,CACH,CAAC,CAGH,CDzCA,IAAAE,EAAiB,mBAEjB,eAAOC,GAA8B,CACnC,GAAI,CACF,IAAIC,EAAkB,CAAC,EACnBC,EAEE,CAAE,KAAAC,CAAK,EAAI,MAAM,YAAU,KAAK,EAEtC,GAAIA,EACFD,EAAc,MAAME,EAAmCD,CAAI,EAE3DF,EAAQ,CAACC,CAAW,MACf,CACL,IAAMG,EAAc,QAAM,0BAAuB,EAE7CA,EAAY,OAAS,IACvBJ,EAAQI,EAAY,IAAKC,GAASA,EAAK,IAAI,EAE/C,CAEA,GAAIL,EAAM,SAAW,EAAG,CACtB,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,oBACP,QAAS,2DACX,CAAC,EAED,MACF,CAEA,MAAMM,EAAqB,CAAE,MAAAN,CAAM,CAAC,EAEpC,IAAMO,EAAcP,EAAM,IAAKQ,GAAa,CAC1C,IAAMC,EAAY,EAAAC,QAAK,QAAQF,CAAQ,EACjCG,EAAW,EAAAD,QAAK,SAASF,EAAUC,CAAS,EAElD,OAAO,EAAAC,QAAK,QAAQ,EAAAA,QAAK,QAAQF,CAAQ,EAAG,GAAGG,CAAQ,sBAAsBF,CAAS,EAAE,CAC1F,CAAC,EAEGR,GACF,MAAM,YAAU,KAAK,CACnB,KAAMM,EAAY,CAAC,CACrB,CAAC,EAGH,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,SACnB,MAAO,qBACT,CAAC,EAED,QAAM,WAAQ,+BAA+B,EAExCN,GACH,QAAM,gBAAaM,EAAY,CAAC,CAAC,EAGnC,QAAM,mBAAgB,CACxB,OAASK,EAAO,CACd,QAAQ,MAAMA,CAAK,EAEnB,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,4BACP,QAAS,OAAOA,CAAc,EAAE,KAAK,CACvC,CAAC,CACH,CACF",
  "names": ["index_exports", "__export", "main", "__toCommonJS", "import_api", "import_api", "import_child_process", "import_promises", "import_path", "import_os", "_tempFilePath", "getTempFilePath", "tempDir", "uniqueSuffix", "storeClipboardImageAsTemporaryFile", "imageUrl", "sourcePath", "imageData", "tempFilePath", "error", "runBackgroundRemoval", "paths", "command", "resolve", "reject", "x", "err", "stdout", "stderr", "import_path", "main", "paths", "newFilePath", "file", "storeClipboardImageAsTemporaryFile", "finderItems", "item", "runBackgroundRemoval", "resultPaths", "itemPath", "extension", "path", "basename", "error"]
}
